Process, Creativity, and Quality.
Burn these three words into your mind while you read this book.
Process. Creativity. Quality.
This book may be full of exercises that teach important topics every programmer should know,
but the real knowledge you'll gain from the book is these three words.
My goal in writing this book on programming is to teach you what I've known to be the three most important constants in software.
Without process you'll flounder around wondering how to get started and have problems maintaining progress on long projects.
Without creativity you'll be unable to solve the problems you'll encounter every day as a programmer.
Without quality you'll have no idea if anything you're doing is any good.


Python functions vs modules

"hi there".split()
vs
len("hi there")

1. Write your code with simple functions to get it working.
2. When you see that you’re basically doing a bunch of func(data) calls that could just be data.func() then refactor it into a class.
3. Or, if you find that you need to add new functionality to this module of functions, but the new functionality doesn’t really fit into the module, then make a class and extend it.
4. Or, If you have a function of functions in a module and they really could be classified into separate concepts, then make classes for them.



def [function_name] ([parameters]):
    [function_definition]


# Below are the Python FUNCTION Checklist to be proficient

a. Did you start your function definition with "def"?
b. Does your function name have only characters and _(underscore) characters?
c. Did you put an open parenthesis "(" right after the function name?
d. Did you put your arguments after the parenthesis "(" separated by commas? e.g: (arg1, arg2)
e. Did you make each argument unique (meaning no duplicated names)?
f. Did you put a close parenthesis and a colon "):" after the arguments? e.g: (arg1. arg2):
g. Did you indent all lines of code you want in the function four spaces? No more, No less
    e.g: def print_two_again(arg1, arg2):
         (1234)print("arg1: %r, arg2: %r " % (arg1, arg2))

h. Did you "end" your function by going back to writing with no indent (dedenting we call it)?
    e.g: def print_two_again(arg1, arg2):
         (1234)print("arg1: %r, arg2: %r " % (arg1, arg2))

         def abcd(arg1):                        # start of the DEDENTING
            xxxxxxxxxxxxx

# Below are the Python how to USE the FUNCTION

1. Did you call/use/run this function by typing its name?
    e.g: print_two_again("Led", "Zepplin")

2. Did you put the "(" character after the name to run it?
3. Did you put the values you want into the parenthesis separated by commas?
4. Did you end the function call with a ")" character?
    e.g: print_two_again("Led", "Zeplin")

    another e.g: print_none()   # Assuming you are only calling that function no input parameter needed


note:
*args - that tells Python to take all the arguments to the function and then put them in args as a LIST.
It's like argv that you've been using, but for functions. It's not normally used too often unless specifically needed

Syntax:

def function name(parameters/inputs):
  "function_docstring"
  "function_suite"
  return [expression]


- 5 lines or more of code
put it in a FUNCTION

- 5 or more function put it in a CLASS
- 5 or more classes group together are called MODULE/LIBRARY
